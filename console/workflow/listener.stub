<?php namespace {{author | studly }}\{{plugin | studly}}\Listeners;

use Carbon\Carbon;
use Waka\Workflow\Classes\Listeners\WorkflowListener;
use ValidationException;
use ApplicationException;

class Workflow{{name | studly}}Listener extends WorkflowListener
{
    /**
     * Register the listeners for the subscriber.
     *
     * @param  Illuminate\Events\Dispatcher  $events
     */
    public function subscribe($event)
    {
        //Evenement obligatoires
        $event->listen('workflow.{{name | lower}}.guard', [$this, 'onGuard']);
        $event->listen('workflow.{{name | lower}}.entered', [$this, 'onEntered']);
        $event->listen('workflow.{{name | lower}}.enter', [$this, 'onEnter']);
        $event->listen('workflow.{{name | lower}}.afterModelSaved', [$this, 'onAfterSavedFunction']);
        //Evenement optionels à déclarer ici.
        //$event->listen('workflow.{{name | lower}}.leave', [$this, 'onLeave']);
        $event->listen('workflow.{{name | lower}}.transition', [$this, 'recLogs']);
        //$event->listen('workflow.{{name | lower}}.enter', [$this, 'onEnter']);
    }

    /**
     * Fonctions de Gard
     * Permet de bloquer ou pas une transition d'état
     * doit retourner true or false
     */
    // public function onExempleGard($event, $params = null)
    // {
    //     $blocked = false;
    //     $model = $event->getSubject();
    //     // $name = $params['name'];
    //     return $blocked;
    // }

    /**
     * FONCTIONS DE TRAITEMENT PEUVENT ETRE APPL DANS LES FONCTIONS CLASSIQUES
     */

    // public function makeSomething($event, $args = null)
    // {
    //     $model = $event->getSubject();
    // }
    // public function checkSomething($event, $args = null)
    // {
    //     $model = $event->getSubject();
    //     if($model->test) {
    //         throw new ValidationException(['any' => 'une exception']);
    //     }
    // }
    

    /**
     * Fonctions de production de doc, pdf, etc.
     * passe par l'evenement afterModelSaved
     * 2 arguements $model et $arg
     * Ici les valeurs ne peuvent plus être modifié il faut passer par un traitement
     */

    // public function sendNotification($model, $args = null)
    // {
    //     $subject = $model->name;
    //     $modelId = $model->id;
    //     $model = $model->toArray();
    //     $model = compact('model');
    //     $dotedModel = array_dot($model);

    //     //trace_log($dotedModel);

    //     $code = $args['code'];

    //     $datasEmail = [
    //         'emails' => $model->responsable->email,
    //         'subject' => "Notification de tâche",
    //     ];
    //     //\Waka\Somenthing\Classes\Productor::sendEmail()
        
    // }

}